
Additional Notes on JSON.stringify() and Usage:

1. <pre> Tag:
   - The <pre> HTML tag preserves whitespace and formatting, making it easier to display JSON or other preformatted text neatly in the browser.
   - Example usage in code:
     display.innerHTML = `<pre>${JSON.stringify(exampleObject, null, 2)}</pre>`;

2. Formatting with `null, 2`:
   - The second and third parameters in `JSON.stringify()` are for formatting.
     - `null`: A placeholder for a "replacer" function (not used in most cases).
     - `2`: Adds indentation for readability. This is optional but useful for debugging or displaying JSON nicely.
   - Without formatting:
     `JSON.stringify(exampleObject)` → `{"name":"Tony Tony Chopper","role":"Doctor","bounty":"1,000 Berries"}`
   - With formatting:
     `JSON.stringify(exampleObject, null, 2)` →
     {
       "name": "Tony Tony Chopper",
       "role": "Doctor",
       "bounty": "1,000 Berries"
     }

3. Most Common Uses for `JSON.stringify()`:
   - **Sending Data to an API**:
     Convert an object into JSON before sending it in an HTTP request.
     Example:
     fetch('https://api.example.com/data', {
         method: 'POST',
         headers: { 'Content-Type': 'application/json' },
         body: JSON.stringify(exampleObject)
     });

   - **Storing Data in Local Storage**:
     Save data in localStorage as a string.
     Example:
     localStorage.setItem('character', JSON.stringify(exampleObject));

   - **Debugging**:
     Log an object as JSON in the console for a clearer view.
     Example:
     console.log(JSON.stringify(exampleObject, null, 2));

Remember: `JSON.stringify()` is mainly for **data transport, storage, or debugging**—not for displaying information directly to users.
